-----------------------------------------------------------------------------------------
-	Create a little subroutine that sorts an integer vector in descending order.
-	Input parameters: pointer to an array, number of elements
-	Result: no result, just sort the array.

e.g. int a[5]; (content:{5,-3,1,9,2} after sort: {9,5,2,1,-3})
------------------------------------------------------------------------------------------------
Code
--------------------------------------------------------------------------------------------------
#include <iostream>
using namespace std;

void sortdatadescending(int* arr, int elements) {
    for (int i = 0; i < elements - 1; i++) {
        for (int j = i + 1; j < elements; j++) {
            if (arr[i] < arr[j]) {
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
    }
}

int main()
{
    int a[5] = {5, -3, 1, 9, 2};

    // Call the function to sort the array
    sortdatadescending(a, 5);

    // Print the sorted array
    for (int i = 0; i < 5; i++) 
    {
        cout << a[i] << " ";
    }

    return 0;
}

--------------------
Explanation:
---------------------
1. The function sortdatadescending takes two parameters: a pointer to an array (arr) and the number of elements in the array (elements).
2. The function uses a nested loop to perform a simple bubble sort algorithm. The outer loop (i) iterates through each elements in the array.
3. The inner loop (j) compares the current elements (arr[i]) with the rest of the elements (arr[j]) to find the maximum elements.
4. If arr[i] is less than arr[j], it means they are in the wrong order, so they are swapped.
5. This process continues until the entire array is sorted in descending order.


